//----------------------
//This MAL specification defines a model of an adaptive/intelligent machine, which inherits the properties and associations of the basic machine; and comprises of an adaptive machine that extends the machine asset, adaptive platform that extends the software asset, intelligent ECU that extends the adaptive machine, and ECU's firmware that extends the basic-software. Generally, this specification includes the basic machine MAL specification and specializes the model to AP.
//----------------------

//----------------------
//This MAL specification defines a model of a basic general-purpose machine that comprises a software, stored data and its information, accounts to access the machine, credentials for each account, machine vulnerabilities, and users. An asset in the specification represents each of the components.
//----------------------

category System {
	
	//Taken from coreLang, and reorganized
	asset Machine {
		| connect 
			info: "Connect to the machine"
			->	_machineConnect

		| _machineConnect
			rationale: "_ machineConnect is a helper attack step, which has the same meaning with the connect attack step. It is used by child assets."
			->	authenticatedAccess,
				connectPrivileges.compromise,
				connectionVulnerabilities.exploit

		| authenticate
			info: "Does the attacker have the credentials of an account?"
			->	authenticatedAccess

		& authenticatedAccess
	  		info: "One way to gain access to a machine is through legitimate authentication."
			->	access

		| bypassAccessControl
			-> access
	 
		| access
			info: "Get an access to the Machine."
			rationale: "We don't explicitly model root access; that is not a sound primitive. Instead, such an account can be modelled explicitly by providing an account with access to all executees and all data."
			->	_machineAccess

		| _machineAccess
			rationale: "_ machineAccess is a helper attack step, which has the same meaning with the access attack step. It is used by child assets. Attacks within this attack step are considered as attacks within the access attack step."
			->	denialOfService, 
				executees.connect,
				data.requestAccess,
				accessVulnerabilities.exploit

		| denialOfService 
			info: "Perform a DoS attack on the machine."
			->	executees.denialOfService,
				data.denyAccess
	}	

	//Directly taken from coreLang
	asset Software extends Machine {
		| access 
			->	_softwareAccess

		| _softwareAccess
			->	_machineAccess,
				executor.connect
	}
}

//Directly taken from coreLang
category Communication {	
	asset Information
		info: "Information can be stored as data and transmitted in data flows. Data and data flows are syntactic forms of the semantics represented by the Information asset. Thus, multiple data and data flow assets can contain the same information."
	{
		| read
			info: "When information is read by the attacker, any associated confidentiality costs are incurred. It is sufficient that the attacker reads a single data or data flow to breach confidentiality."

		& write
			info: "When information is written by the attacker, any associated integrity costs are incurred. The attacker must, however, compromise all data and data flows in order to breach integrity. Thus, if the records of an ATM are modified, this might incur no cost as long as the master data is untouched."

		& delete
			info: "When information is deleted by the attacker, any associated availability costs are incurred. The attacker must, however, delete all data and data flows in order to breach integrity. Thus, if malware wipes a hard drive, this might incur no cost as long as a backup is easily accessible."
	}

	asset Data
		info: "Data is a concrete, syntactic representation of Information at rest."
	{
		| requestAccess  
			info: "When stored on a machine, access control needs to be granted."
			-> 	authenticatedRead,
				authenticatedWrite,
				authenticatedDelete

		| anyAccountRead 
			info: "A single account with read privileges (in conjuction with data access) is enough to read the data."
			-> 	authenticatedRead

		| anyAccountWrite
			info: "A single account with write privileges (in conjuction with data access) is enough to write the data."
			-> 	authenticatedWrite

		| anyAccountDelete
			info: "A single account with delete privileges (in conjuction with data access) is enough to delete the data."
			-> 	authenticatedDelete

		& authenticatedRead
			info: "Access and authentication will allow reading of data."
			-> 	read

		& authenticatedWrite
			info: "Access and authentication will allow writing of data."
			-> 	write

		& authenticatedDelete
			info: "Access and authentication will allow deleting of data."
			-> 	delete

		| read
			info: "An attacker that reads the data, learns the encoded information."
			-> 	information.read,
				containedData.read

		| write
			-> 	delete,
				information.write,
				containedData.write

		| delete
			info: "Deletion of data leads to information loss only if there is no untouched copy elsewhere. If data is transmitted through data flows, those data flows will also be affected by the tampering."
			-> 	information.delete,
				containedData.delete

		| denyAccess
			info: "Denial-of-service attacks can make data unavailable."
	}
}

//Directly taken from coreLang
category Security {
   asset Account {
		| compromise
			->	accessedMachines.authenticate, 
				readData.anyAccountRead,
				writtenData.anyAccountWrite,
				deletedData.anyAccountDelete,
				authenticatees.compromise
	}

   asset Credentials extends Data {
	    | read
	    	-> 	accounts.compromise
	}
	
	asset Vulnerability {
	   | exploit [ExponentialDistribution(10.0)]
	      -> 	privileges.compromise
   }
}

//Directly taken from coreLang
category People {
	asset User {
		| compromise
			->	accounts.compromise
	}
}

associations {	
	Account [connectPrivileges] 	*	<-- ConnectionPrivilees	--> *				[connectMachines]	Machine
			info: "These privileges are granted to anyone who connects to a machine."
	Account [accounts]			  	*	<-- AccessPrivileges	--> *				[accessedMachines]	Machine
			info: "These accounts grant access the the machine."
	Account [accounts]				*  	<-- Credentials			--> *					[credentials]	Credentials
	Account [readingAccounts]		*  	<-- Read				--> *						[readData]	Data
	Account [writingAccounts]		*  	<-- Write				--> *					[writtenData]	Data
	Account [deletingAccounts]		*  	<-- Delete				--> *					[deletedData]	Data
	Account [authenticators]		*	<-- Authentication		--> *				[authenticatees]	Account
   	Account [privileges]			1-* <-- Privileges 			--> *				[vulnerabilities]	Vulnerability
	Account [accounts]				*  	<-- UserAccount 		--> *							[users]	User
	Account [assignedAccounts]		1-* <-- Assignment			--> *				[assignedSoftwares]	Software
			info: "Software needs to be granted certain privileges when executing on a platform. When the software is compromised, the attacker gains its privileges on the platform."
	
	Data [data] 					*	<-- Representation 		--> 0-1					[information]	Information
			info: "The data constitutes a syntactic representation at rest of the information."
	Data [containingData] 			*	<-- Containment 		--> *					[containedData]	Data	
	Machine [machines] 				*	<-- Storage 			--> *							[data]	Data
	Machine	[connVulnerableMachine] *	<-- ConnectionVulnerability	--> 0-1	[connectionVulnerabilities]	Vulnerability	
	Machine [accessVulnerableMachine] *	<-- AccessVulnerability --> 0-1			[accessVulnerabilities]	Vulnerability   	
   	Machine [executor]				0-1	<-- Execution 			--> *						[executees]	Software
}

category System {

	asset AdaptiveMachine extends Machine 
		info: "An adaptive machine is a hardware or virtual machine that executes an adaptive platform instance." 
	{
		| access
			->	_adaptiveMachineAccess

		| _adaptiveMachineAccess
			rationale: "<adaptivePlatform.connect> is taken from machine asset, where the software is replaced with adaptivePlatform."
			->	_machineAccess,
				denialOfService, 
				adaptivePlatform.connect,
				data.requestAccess,
				accessVulnerabilities.exploit

		| denialOfService 
			info: "Perform a DoS attack on the adaptive machine."
			rationale: "<adaptivePlatform.denialOfService> is taken from machine asset, where the software is replaced with adaptivePlatform."
			->	adaptivePlatform.denialOfService, 
				data.denyAccess
	}

	asset AdaptivePlatform extends AdaptiveMachine 
		info: "An adaptive platform is a software platform that runs on an adaptive machine."
		rationale: "As software is to a machine, an adaptive platform is to an adaptive machine."
	{
		| access
			->	_adaptivePlatformAccess

		| _adaptivePlatformAccess
			->	_adaptiveMachineAccess,
				adaptiveMachine.connect
	}
}

associations {	
	AdaptiveMachine [adaptiveMachine] 0-1	<-- APExecution		-->	* 				[adaptivePlatform]	AdaptivePlatform
}

category System {
	
	//Directly taken from the coreLang ---------
	asset Service extends Software {}
	asset Client extends Software {}

	//AUTOSARLang specific ---------------------
	abstractAsset UserApplication extends AdaptivePlatform 
		info: "User Application is the top-most layer of the adaptive platform, which is a hardware-independent user-defined application that runs on top of the runtime environment, ARA."
	{
		| compromise 
			info: "User apps are the most vulnerable components of the platform."
			rationale: "Applications can be compromised, maybe, by phishing, injection, etc... " 
			->	access

		| launch
			info: "Start up user applications."
			rationale: "User applications are launched by the Execution Management of the platform."
			->	access 

		| access
			info: "Get access to a user application."
			rationale: "Access to the application implies an attacker has the capability of the application in the platform. Data, in this case, can be persistent data, manifest, or other forms of data."
			->	_adaptivePlatformAccess,
				denialOfService,
				data.requestAccess, 
				functionalCluster.requestAccess,
				fcInterfaces.access,
				userAppClient.access
			
		| shutdown
			info: "Shutdown user applications."
			rationale: "User applications are shutdown by the Execution Management of the platform."
			->	denialOfService

		| denialOfService
			info: "Perform a DoS attack on the application."
			rationale: "Data, in this case, can be persistent data, manifest, or other forms of data that belongs to the application. Applications can be denied from services by the runtime environment, ARA. Possibly, by denying services of the FC (for the platform services/functionalities) or other user applications (for the non-platform services)."
			->	data.denyAccess,
				userAppService.denialOfService
	}

	asset ARA extends AdaptivePlatform {
		| access 
			info: "Get access to the ARA (AUTOSAR Runtime environment for Adaptive Applications)."
			rationale: "Once attackers gain access to the library of service interfaces and the functional cluster interfaces (such as interfaces of the operating system, execution management, communication management, etc.), they can do other more attacks."
			-> 	_adaptivePlatformAccess,
				denialOfService

		| compromise 
			->	access,
				denialOfService,
				informationLeak,
				messageInjection

		| informationLeak
			info: "Make an information leakage between running user applications."
			rationale: "User applications request for library interfaces for further access, then, attackers on the ARA can leak information between the requesting applications."
			->	information.read

		| messageInjection
			info: "Inject messages passing through ARA interfaces."
			rationale: "Message passing through ARA interface is either set of data or information."
			->	data.write

		| denialOfService
			info: "Perform a denial of service to the library of services/functionalities interfaces."
			rationale: "This attack step, in turn, denies user applications from both accessing the functional cluster services/functionalities and non-platform services."
			->	platformApps.denialOfService,
				userApps.denialOfService
	}

	abstractAsset FunctionalCluster extends AdaptivePlatform 
		info: "A functional cluster is a collective name for the foundational software components of the platform. It contains platform services and foundation."
	{
		| launch
			info: "Start up functional cluster applications."
			rationale: "Any functional cluster can be launched/started by the Execution Management, which is a functional cluster by itself."
			->	access 

		| shutdown
			info: "Shutdown functional cluster applications."
			rationale: "Functional cluster applications are shutdown by the Execution Management of the platform."
			->	denialOfService

		| access
			-> 	_adaptivePlatformAccess,
				denialOfService,
				circumventPEP

		| requestAccess
			info: "Make access request to the functional cluster."
			rationale: "requestAccess >> iam.requestAuthentication >> authenticate >> access!"
			->	iam.requestAuthentication

		| circumventPEP 
			info: "Circumvent PEP (Policy Enforcement Point) of the functional cluster element."
			rationale: "Attackers can bypass the PEP or circumvent the policy decision received from IAM. Reaching this step is enough, and it will be redefined by each child."
	}

	abstractAsset AdaptivePlatformFoundation extends FunctionalCluster {}
	abstractAsset AdaptivePlatformService extends FunctionalCluster {}

	asset OperatingSystem extends AdaptivePlatformFoundation 
		info: "OS in AUTOSAR adaptive platform is a POSIX-based execution context."
		rationale: "In AUTOSAR Adaptive Platform, the OS context is a POSIX-based in which user applications use only PSE51 as an interface whereas functional cluster applications use any available interface."
	{
		| access
			info: "Get access to the operating system."
			rationale: "By any means, attackers get access to the operating system, maybe, from its parent assets after authentication via authenticated access or after access control is bypassed."
			-> 	_adaptivePlatformAccess,
				denialOfService,
				dataInjection,
				memoryCorruption,
				malware,
				accessVulnerabilities.exploit

		& malware 
			info: "Inject a malware program to the OS."
			rationale: "A malware is a general term for computer viruses, worms, trojan horses, spyware, adware, most rootkits, and other malicious programs [5]."
			->	accounts.compromise,
				data.read,
				data.write,
				data.denyAccess,
				memoryCorruption,
				denialOfService,
				bypassAccessControl

		| denialOfService
			info: "Perform a DoS attack on the operating system."
			rationale: "Performed by flooding services, exhausting resources, network requests, etc."
			->	apInstance.denialOfService,
				data.denyAccess,
				adaptiveMachine.denialOfService 

		| dataInjection
			info: "Inject data to a running process or thread."
			rationale: "Data injection from process to process, thread to thread, or from attacker to a processing data can be done."
			->	data.write

		| informationLeak
			info: "Leak information about the running process."
			rationale: "As a result of memory corruption, an information leak can occur [6|Page19]."
			->	information.read

		& memoryCorruption
			info: "Perform a memory corruption from unhandled code."
			rationale: "User applications and functional cluster are implemented in C++. Thus, their process can cause memory corruption."
			->	informationLeak,
				denialOfService,
				dataInjection,
				accounts.compromise 
				
		# protectedRuntimeEnvironment
			->	memoryCorruption

		# antiMalware [UniformDistribution(1.0,2.0)]
			->	malware
	}

	asset ExecutionManagement extends AdaptivePlatformFoundation 
		info: "An Execution Management is managed by the OS."
	{
		| access 
			info: "Get access to the Execution Management (EM)."
			rationale: "Execution Management starts and shuts down applications and services, which may lead to other exploitations."
			-> 	_adaptivePlatformAccess,
				circumventStateTransition,
				userApps.launch,
				userApps.shutdown,
				platformApps.launch,
				platformApps.shutdown

		| circumventStateTransition
			info: "Circumvent the state transition of processes, applications, machine, or functional group."
			rationale: "Execution Management performs the state transitions and controls the actual set of running processes, depending on the current states [1]."
			->	platformApps.denialOfService,
				userApps.denialOfService
	}
}

category Security {
	
	asset Manifest extends Data 
		info: "Manifest, in AP, means a configuration file. There are three types of manifest files namely application manifest, service instance manifest, and machine manifest."
	{
		| read
			info: "Read manifest files."
			->	platformApps.authenticate,
				information.read,
				containedData.read

		| write
			info: "Write manifest files."
			rationale: "Writing a manifest file can imply reading and/or deleting it. Thus, can authenticate the FC and/or deny service for both user apps and platform apps."
			->	read,
				delete,
				information.write,
				containedData.write

		| delete
			info: "Delete manifest files"
			->	denyAccess,
				information.delete,
				containedData.delete

		| denyAccess
			info: "Deny access to the AA's configuration file"
			rationale: "Deny access to the manifest file can cause a DoS attack on the platform applications as well as user applications."
			->	userApps.denialOfService,
				platformApps.denialOfService
	}

   	asset IAM extends AdaptivePlatformService
   		info: "IAM - Identity Access Management, where authentication service in AP is provided."
   	{
   		| access
   			info: "Get access to the IAM framework."
   			rationale:"Assumption: attackers get access to the running IAM instance."
   			->	_adaptivePlatformAccess,
   				denialOfService,
   				circumventPDP,
   				processedPolicies.read,
   				processedCapabilities.read

   		| denialOfService
   			info: "Making the IAM framework unavailable."
   			->	platformApps.denialOfService,
   				data.denyAccess

   		| circumventPDP
   			info: "Circumvent PDP (Policy Decision Point) of the IAM."
   			rationale: "Circumventing PDP implies bypass FC authentication or provide data access."
   			->	platformApps.bypassAccessControl,
   				data.requestAccess

   		| requestAuthentication
   			info: "Make an authentication request for the IAM."
   			rationale: "Functional cluster requests IAM to authenticate for the requesting client, which is a user application."
   			->	platformApps.authenticate
   	}
}

associations {	
	UserApplication [userApp]	  	* 	<-- FCAccess			--> * 				[functionalCluster]	FunctionalCluster
	UserApplication [userApps]	 	*	<--	RuntimeEnvironment	-->	*			 		[fcInterfaces]	ARA	
	UserApplication [userAppService]*	<-- NonPlatformService 	--> * 					[userAppClient]	UserApplication
		info: "User applications provide non-platform services to other user applications."		 

	ARA [fcInterfaces]				*	<--	DataProcess 		-->	*							[data]	Data
	ARA [fcInterfaces]				*	<--	ProcessedDataLeak	-->	*					[information]	Information
	ARA [library]					0-1	<-- LibraryInterface 	--> *					[platformApps]	FunctionalCluster

	OperatingSystem [os] 			1 	<-- OsAccounts 			--> *						[accounts]	Account	
	OperatingSystem [os]			*	<--	DataProcess 		-->	*							[data]	Data
	OperatingSystem [os]			*	<--	ProcessedData		-->	*					[information]	Information	
	OperatingSystem [os] 			1 	<-- ApOs 				--> *					[apInstance]	AdaptivePlatform

	ExecutionManagement [em]		1	<-- AAManagement 		--> * 						[userApps]	UserApplication 
	ExecutionManagement [em]		*	<-- FCManagement 		--> * 					[platformApps]	FunctionalCluster

	IAM[iam]						*	<-- Authentication 		--> *					[platformApps]	FunctionalCluster
		info: "Any access request to FC, in turn, requests IAM for authentication."
	IAM [authInterface]				0-1	<--	DataAccess 			-->	*							[data]	Data
	IAM [iamFramework]				0-1	<--	ReadPolicy 			-->	*				[processedPolicies]	Manifest
		info: "Manifest, in this case, means Service Instance Manifest."
	IAM [accessManager]				0-1	<--	ReadCapability 		-->	*			[processedCapabilities]	Manifest
		info: "Manifest, in this case, means Application Manifest."

	Manifest [applicationManifests] *	<--	Capability 			-->	*						[userApps]	UserApplication
	Manifest [serviceInstManifests] *	<--	ServiceInterfaceReq	-->	*					[platformApps]	FunctionalCluster
}

category Communication {
	asset EncryptedData extends Data
      info: "Data is a concrete, syntactic representation of Information at rest."
	{
		& authenticatedRead
			info: "Access and authentication will allow reading of data."
			-> readEncrypted

		& authenticatedWrite
			info: "Access and authentication will allow writing of data."
			-> writeEncrypted

		& readEncrypted
			->	read

		& writeEncrypted
			-> write

		E decryptionKeysExist
			info: "If any decryption keys exist, this defense step is compromised, but if not, this will prevent readEncrypted from being reached."
			rationale: "Without this step, readEncrypted will, in the case of no modelled keys, be compromised, which is counterintuitive."
			<- decryptionKeys
			-> readEncrypted

		E encryptionKeysExist
			info: "If any encryption keys exist, this defense step is compromised, but if not, this will prevent witeEncrypted from being reached."
			rationale: "Without this step, writeEncrypted will, in the case of no modelled keys, be compromised, which is counterintuitive."
			<- encryptionKeys
			-> writeEncrypted
	}
	
	asset PersistentData extends EncryptedData 
		info: "Persistent data is always encrypted." {}
}

category Security {
	asset CryptographicKey extends Data {
       | read
         	-> 	decryptedData.readEncrypted,
				encryptedData.writeEncrypted
	}
	
	asset CryptoStack extends AdaptivePlatformService {
         | access
         	info: "Get access to the cryptographic services."
         	rationale: "<iam.requestAuthentication> is a special case in this asset, the FC has an accessRequest attack step which calls for IAM. In addition to it, CryptoStack asks IAM for access requests of its special services."
            -> 	_adaptivePlatformAccess,
				circumventPEP,
               	circumventCryptoService,
               	keys.read,
               	denialOfService,
               	iam.requestAuthentication

         | denialOfService
            info: "Denial of cryptographic services to requesting applications."
            rationale: "Functional cluster will not accessible from any requesting app."
            -> 	encryptedData.denyAccess,
            	decryptedData.denyAccess, 
            	persistentData.denyAccess 

         | circumventCryptoService
            info: "Circumvent the crypto service manager."
            -> 	denialOfService,
            	decryptedData.readEncrypted,
               	encryptedData.writeEncrypted

		 | circumventPEP
      		info: "An attacker can circumvent the policy enforcement point (PEP) of the CryptoStack and return pretended IAM authentication result."
      		rationale: "With this attack step, an attacker can do two different things. 1. Deny access while authenticated correctly. 2. Bypass access control while authentication is rejected."
      		->	persistentData.requestAccess,
      			persistentData.denyAccess 
	}
}

associations {	
	EncryptedData [decryptedData]	*	<-- Decryption			-->	*				[decryptionKeys]	CryptographicKey
   	EncryptedData [encryptedData]	*	<-- Encryption			-->	*				[encryptionKeys]	CryptographicKey
	
	CryptoStack [cryptoService] 	0-1	<--	CryptoService		-->	*							[keys]	CryptographicKey
	CryptoStack [encProgram] 		0-1	<--	Encryption			-->	*					[encryptedData]	EncryptedData
	CryptoStack [decProgram] 		0-1	<--	Decryption			-->	*					[decryptedData]	EncryptedData
	CryptoStack [cryptoProgram] 	0-1	<--	DataSecurity		-->	*				[persistentData]	PersistentData
}

category System {	
	asset SignalToServiceMappingService extends AdaptivePlatformService {
		| access
			info: "Get access to the signal to service mapping adaptive platform service."
			->	_adaptivePlatformAccess,
				denialOfService

		| denialOfService
			info: "Deny signal-to-service mapping service, the communication with non-AUTOSAR applications can be denied."
			->	comApp.denialOfService
	}
}

category Security {
	asset AuthenticationService extends Service 
		rationale: "Authentication service is not actively involved in account authentication (e.g. key.read leads directly to account.authenticate), because that is not needed for the attacks we are interested in."
		{
			| access
				info: "If a service is tasked with authentication of accounts, its compromise leads to the compromise of the associated accounts."
				-> 	_softwareAccess,
					authenticatedAccounts.compromise
	}
}

associations {	
	
	Account [authenticatedAccounts] *	<-- AccountAuthentication --> 0-1  	[authenticationServices]	AuthenticationService
      	info: "Conceptually, authentication is separated from access control (obvious in the case of e.g. Radius servers). authenticationServices provide the authentication service."

	SignalToServiceMappingService [s2s] 0-1	<--	SignalServiceConv	-->	*					 [comApp]	UserApplication
}

category System {

	//Partially taken from vehicleLang with some modifications 
	asset ECU extends AdaptiveMachine 
		info: "An intelligent ECU, which is designed to support high-performance computing and high-speed connectivity."
		rationale: "An intelligent ECU extends the adaptive machine defined within this specification."
	{
		| connect
			info: "Attackers can attempt to connect to the ECU if they have access to the network, services, data flows, etc..."
			-> 	_adaptiveMachineAccess,
				attemptChangeOperationMode,
				firmware.maliciousFirmwareModification

		| access
		  	info: "Attacker gain an access to the ECU after bypassed access control or properly authenticated."
			-> 	_adaptiveMachineAccess,
				changeOperationMode,
				uploadFirmware,
				bypassMessageConfliction,
				injectWakeUpFunction,
				busNetwork.denialOfService
		
		| maliciousFirmwareUpload
				info: "Maliciously upload a forged firmware leads to full access on the ECU and ability to inject messages on the previous running services."
				->  access,
					bypassMessageConfliction,
					busNetwork.trafficInjection

		& uploadFirmware
				info: "Updating the firmware leads to the ability to inject messages not only on the previous running services but also on network."
				->  busNetwork.trafficInjection

		| passFirmwareValidation
				info: "If the firmware validation key is stored in the ECU, this means that the firmware validation is passed, and a new firmware can be uploaded."
				-> uploadFirmware

		| shutdown
				info: "When the ECU is taken offline by some other attack step. The effort needed to achieve this is applied on the distributions of the parent attacks."
				rationale: "<denialOfService> deny access to data and executees."
				->	bypassMessageConfliction,
					denialOfService

		& changeOperationMode
				info: "Put the ECU into diagnostics (if vehicle is moving slowly or is stopped) or even update mode (bootmode)."
				rationale: "This can bypass message conflictions and IDPS because the legitimate ECU will no lorger send messages and the attacker can imitate it, if carefull."
				-> 	bypassMessageConfliction

		& attemptChangeOperationMode [ExponentialDistribution(10.0)]
				info: "Put the ECU into diagnostics (if vehicle is moving slowly or is stopped) or even update mode (bootmode) but after some effort."
				-> 	bypassMessageConfliction

		# operationModeProtection
				info: "Either prevent diagnostics mode after vehicles starts moving or allow diagnostics mode only after some physical change is done on vehicle."
				->	changeOperationMode,
					attemptChangeOperationMode

		| bypassMessageConfliction
				info: "Bypass message confliction protection mechanisms by changing ECU's operation mode -> no conflicts -> service message injection."
				rationale: "Reaching this step is enough."

		//AUTOSARLang specific ---------------------
		| busOff
			info: "A state that an ECU is shutdown forever."
			rationale: "This attack step can be reached from vehicle bus network"
			->	denialOfBodyControl
		
		| injectWakeUpFunction
			-> 	batteryDrain

		| denialOfBodyControl
			info: "Because of ECUs bus-off state, communication between the keyfob and vehicle is cut-off and make driver unable to start the vehicle."
			->	vehicleImmobilization

		| batteryDrain
			->	vehicleImmobilization 

		| vehicleImmobilization
			info: "Vehicle cannot be mobilized unless dead ECUs are changed."
			rationale: "Reaching this step is enough."
	}
	
	//Directly taken from vehicleLang
	asset Firmware extends Software
		info: "Specifies the firmware running on an ECU as a basic software."
	{
		| maliciousFirmwareModification
				info: "Validate a firmware update either by cracking (brute forcing) the checksum or worse by exploiting the absence of verification."
				->  bypassFirmwareValidation,
					crackFirmwareValidation

		| crackFirmwareValidation [ExponentialDistribution(20.0)]
				info: "Crack firmware validation if it is enabled."
				->  hardware.maliciousFirmwareUpload

		& bypassFirmwareValidation
				info: "Bypass firmware validation if it is not enabled."
				->  hardware.maliciousFirmwareUpload

		# firmwareValidation
				info: "Code signing and verification during upload, use of strong checksum functions and/or don’t distribute the private keys for signing."
				rationale: "Rubicon - Zero-knowledge Armor for Automotive Security, RubiconLabs"
				->	bypassFirmwareValidation
	}	

	//Directly taken from coreLang
	asset NetworkService extends Service {
		| access
			->	_softwareAccess,
				dataflows.respond
	}

	asset NetworkClient extends Client {
		| access
			->	_softwareAccess,
				dataflows.request
	}

	//AUTOSARLang specific ---------------------
	asset CommunicationManagement extends AdaptivePlatformFoundation 
		info: "CM is a foundational functionality that the platform should constitute. It handles network services request and reply with a service-oriented architecture model." 
	{
		| access
			info: "Get access to the communication management."
			rationale: "Once an attacker gets access to CM, she can act as both network service and network client."
			->	_adaptivePlatformAccess,
				dataflows.request,
				dataflows.respond,
				denialOfService

		| denialOfService
			-> 	dataflows.denialOfService
	}

	asset REST extends AdaptivePlatformFoundation 
		info: "RESTful is a foundational functionality that handles network services request and reply with a network binding via HTTP/JSON communication format." 
	{
		| access
			info: "Get access to the REST."
			rationale: "Once an attacker gets access to REST, she can act as both network service and network client."
			->	_adaptivePlatformAccess,
				dataflows.request,
				dataflows.respond,
				denialOfService
		
		| denialOfService
			->	dataflows.denialOfService
	}
}

category Networking {
	asset Network
	{ 	
		| access
			info: "Access implies the possibility to submit packets over the network. It does not imply the possibility to listen to others' traffic on the network. You are outside the router but with a possibility to communicate in to the network."
			-> 	trafficRouters.forwarding, 
				denialOfService,
				service.connect

		| eavesdrop
			info: "Attackers can sometimes eavesdrop."
			-> 	dataflows.eavesdrop

		| manInTheMiddle
			info: "Attackers can sometimes intercept and tamper with communications."
			->	access,
				eavesdrop,
				dataflows.manInTheMiddle,
				trafficRouters.denialOfService

		| denialOfService
			info: "The network is made unavailable."
			-> 	dataflows.denialOfService 
	}

	asset Router extends NetworkService {
		& access 
			-> 	_machineAccess,
				trafficNetworks.manInTheMiddle,
				forwarding

		| forwarding 
			rationale: "Forwarding is the lightest interaction with the router, where the router simply retransmits received messages. Vulnerabilities may, however, lead to compromise of the router as well as of the associated firewall. Therefore, Forwarding leads to Connect."
			-> 	connect

		| denialOfService 
			-> 	trafficNetworks.denialOfService	
	}

	//AUTOSARLang specific ---------------------
	asset VehicleNetwork extends Network 
	{
		| physicalAccess
			info: "Get physical access to the in-vehicle network."
			->	denialOfService,
				eavesdrop,
				access

		| access
			info: "Get access to the vehicular network."
			->	denialOfService, 
				trafficInjection,
				networkedEcus.connect,
				trafficRouters.forwarding, 
				service.connect 

		| trafficInjection
			rationale: "Reaching this step is enough. It'll be redefined by its child assets."
	}

	asset BusNetwork extends VehicleNetwork
	{
		| trafficInjection
			info: "An adversary injects traffic for further exploitation, e.g. wakeup messages, or exceed the maximum  allowed Transmit Error Counter threshold."
			-> 	wakeUpMessageInjection,
				busNetworkedEcus.busOff

	   	| wakeUpMessageInjection
	   		info: "Specialized form of traffic injection"
	   		-> 	busNetworkedEcus.batteryDrain 	

		& impersonation
			rationale: "No way for a correct ECU to prove that it has not sent or receive a given message."
			->	manInTheMiddle

		# msgAuthenticated 
			->	impersonation
	}

	asset EthernetNetwork extends VehicleNetwork {
		| physicalAccess
			rationale: "A technician attacker can get an opportunity to access the Ethernet network, maybe, for maintenance. However, in an Ethernet network, physical access merely can't help the attacker to eavesdrop messages or act as a man-in-the-middle."
			-> 	denialOfService,
				access,
				unauthorizedNetworkExpansion,
				resetSwitchPassword

		& unauthorizedNetworkExpansion
			-> 	manInTheMiddle		

		| access
			-> 	denialOfService, 
				trafficInjection,
				networkedEcus.connect,
				trafficRouters.forwarding, 
				service.connect, 
				arpCachePoisoning,
				macSpoofing,
				dhcpSpoofing,
				macFlooding

		| denialOfService
			->	dataflows.denialOfService

		| eavesdrop
			-> 	sessionHijacking,
				replay,
				dataflows.eavesdrop

		| sessionHijacking
			-> 	impersonation

		| replay
			->	impersonation

		| dhcpSpoofing
			->	manInTheMiddle

		& arpCachePoisoning
			->	manInTheMiddle

		& macSpoofing
			->	manInTheMiddle

		& impersonation
			->	manInTheMiddle

		| resetSwitchPassword
			-> switchAccess

		| switchAccess
			-> 	overwriteSwitchMACTable,
				resetSwitchPassword,
				denialOfService,
				networkedEcus.connect

		| overwriteSwitchMACTable
			info: "Switch MAC table is overwritten."
			->	macFlooding

		| macFlooding
			->	eavesdrop,
				denialOfService

		| shutdown
			->	denialOfService
		
		| trafficInjection
			-> denialOfService

		# sARP
			->	arpCachePoisoning
		
		# idps
			->	macSpoofing
		
		# limitNewMACAddress
			->	unauthorizedNetworkExpansion

		# msgAuthenticated 
			->	impersonation
	}
}

category Communication {
	asset Dataflow
		info: "Dataflow is a channel that contains Data in transit."
		rationale: "As opposed to securiLang1, missing network paths cannot stop modelled dataflows. If there is a dataflow but no network infrastructure to support it, this logic will assume that the unmodelled infrastructure exists."
	{
		| eavesdrop
			info: "An attacker that eavesdrops on the data flow, can access the contained data. That data may, in turn, be encrypted, thus preventing a breach of confidentiality."
			->	data.read

		| manInTheMiddle
			info: "An attacker that man-in-the-middles the data flow, can control the contained data. That data may, in turn, be encrypted and authenticated, thus preventing a breach of confidentiality and integrity."
			->	eavesdrop, 
				denialOfService, 
				request,
				respond,
				data.write, 
				data.read, 
				data.delete

		| denialOfService
			info: "A denial-of-service-attack on the dataflow makes the contained data inaccessible. The information may, however also be available elsewhere."
			->	data.delete

		| request
			->	services.connect

		| respond
			->	clients.connect,
				executingClients.access
	}
}

associations {	
	Network [trafficNetworks]		* 	<-- Connection 			--> * 				[trafficRouters]	Router
	Network [networks]				* 	<-- Communication 		--> *						[dataflows]	Dataflow	
	Network [networks]				* 	<-- Listening		 	--> *						[service]	NetworkService
	Dataflow [dataflows]			*	<-- Request				--> *						[clients]	NetworkClient
	Dataflow [dataflows]			* 	<-- Response			--> *						[services]	NetworkService
	Dataflow [programDistributionFlow] * <-- ProgramDistributionToClient --> *		[executingClients] 	NetworkClient
		info: "Some servers distribute programs to clients, e.g. software updates, or Web applications."
	Dataflow [programDistributionFlow] * <-- ProgramDistributionFromServer --> *	[providingServices]	NetworkService
		info: "Some servers distribute programs to clients, e.g. software updates, or Web applications."
	Dataflow [dataflow]				0-1	<--	Transmission		-->	0-1							[data]	Data


	CommunicationManagement [com]	*	<-- CmDataflow 			--> * 						[dataflows]	Dataflow 
	REST [rest]						*	<-- RestDataflow 		--> * 						[dataflows]	Dataflow 


	ECU	[hardware] 					1	<-- FirmwareExecution 	-->	0-1						[firmware]	Firmware
		info: "Every ECU can have (up to one) firmware running on it."
	ECU [networkedEcus]				*	<--	Connection			-->	0-1						[vNetworks]	VehicleNetwork
	ECU [busNetworkedEcus] 			*	<--	EcuBusConnection	-->	0-1				 	[busNetwork]	BusNetwork 	
}

category System {

	asset AdaptiveApplication extends UserApplication 
		info: "Adaptive Application is a user-defined application, which is an underlying hardware independent."
	{

		| access
			info: "Get access to a adaptive application."
			->	_adaptivePlatformAccess,
				denialOfService,
				provideFakeService,
				requestService,
				data.requestAccess, 
				functionalCluster.requestAccess,
				fcInterfaces.access,
				userAppService.access,
				persistentData.requestAccess, 
				applicationManifests.requestAccess

		| requestService 
			rationale: "An application can request a service, and gets access to the communication management. [1 page 15]"
			->	cmClient.access //Does this require auth?

		| provideFakeService 
			info: "An application provides a fake service to other applications for further exploitation."
			rationale: "An application can provide fake service to get access to the communication management foundation [1 page 15], For example, fake service can deny legitimate services, fake service can also read capabilities of other applications (service requesting applications)."
			->	cmService.access,
				userAppService.denialOfService,
				applicationManifests.requestAccess
	}
}

associations {	
	AdaptiveApplication [adapApps]	*	<--	AppData 			-->	*							[data]	Data	
	AdaptiveApplication [adapApps]	*	<--	AppPersistentData	-->	*				[persistentData]	PersistentData	
	AdaptiveApplication [appClient]	* 	<-- ServiceRequest 		--> 0-1 					[cmService]	CommunicationManagement
	AdaptiveApplication [npService]	* 	<-- ServiceRespond 		--> 0-1 					[cmClient]	CommunicationManagement
}
