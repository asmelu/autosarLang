category System {
	
	//Taken and reorganized from coreLang
	abstractAsset Machine {
		| connect 
			info: "Connect to the machine"
			->	_machineConnect

		| _machineConnect
			rationale: "_ machineConnect is a helper attack step, which has the same meaning with the connect attack step. It is used by child assets."
			->	authenticatedAccess,
				connectPrivileges.compromise,
				connectionVulnerabilities.exploit

		| authenticate
			info: "Does the attacker have the credentials of an account?"
			->	authenticatedAccess

		& authenticatedAccess
	  		info: "One way to gain access to a machine is through legitimate authentication."
			->	access

		| bypassAccessControl
			-> access
	 
		| access
			info: "Get an access to the Machine."
			rationale: "We don't explicitly model root access; that is not a sound primitive. Instead, such an account can be modelled explicitly by providing an account with access to all executees and all data."
			->	_machineAccess

		| _machineAccess
			rationale: "_ machineAccess is a helper attack step, which has the same meaning with the access attack step. It is used by child assets. Attacks after this attack step are considered as attacks after access attack step."
			->	denialOfService, 
				executees.connect,
				data.requestAccess,
				accessVulnerabilities.exploit

		| denialOfService 
			info: "Perform a DoS attack on the machine."
			->	executees.denialOfService,
				data.denyAccess
	}
	
	abstractAsset Software extends Machine {
		| access 
			->	_softwareAccess

		| _softwareAccess
			->	_machineAccess,
				executor.connect
	}

	asset Service extends Software {}

	asset Client extends Software {}	

	asset NetworkService extends Service {
		| access
			->	_softwareAccess,
				dataflows.respond
	}

	asset NetworkClient extends Client {
		| access
			->	_softwareAccess,
				dataflows.request
	}
	//-----------------------------------
	
	//Taken from vehicleLang with some modifications 
	asset ECU extends Machine {
		| connect
			info: "Attackers can attempt to connect to the ECU if they have access to the network, services, data flows, etc..."
			-> 	_machineConnect,
				attemptChangeOperationMode,
				firmware.maliciousFirmwareModification

		| access
		  	info: "Attacker gain an access to the ECU after bypassed access control or properly authenticated."
			-> 	_machineAccess,
				busOff,
				injectWakeUpFunction,
				//denialOfService,
				busNetwork.denialOfService,
				changeOperationMode,
				uploadFirmware,
				bypassMessageConfliction
		
		| maliciousFirmwareUpload
				info: "Maliciously upload a forged firmware leads to full access on the ECU and ability to inject messages on the previous running services."
				->  access,
					bypassMessageConfliction,
					vNetworks.trafficInjection //??

		& uploadFirmware
				info: "Updating the firmware leads to the ability to inject messages not only on the previous running services but also on network."
				->  vNetworks.trafficInjection

		| passFirmwareValidation
				info: "If the firmware validation key is stored in the ECU, this means that the firmware validation is passed and a new firmware can be uploaded."
				-> uploadFirmware

		| shutdown
				info: "When the ECU is taken offline by some other attack step. The effort needed to achieve this is applied on the distributions of the parent attacks."
				->	bypassMessageConfliction,
					denialOfService // Deny access to data and executees

		& changeOperationMode
				info: "Put the ECU into diagnostics (if vehicle is moving slowly or is stopped) or even update mode (bootmode)."
				rationale: "This can bypass message conflictions and IDPS because the legitimate ECU will no lorger send messages and the attacker can imitate it, if carefull."
				-> 	bypassMessageConfliction

		& attemptChangeOperationMode [ExponentialDistribution(10.0)]
				info: "Put the ECU into diagnostics (if vehicle is moving slowly or is stopped) or even update mode (bootmode) but after some effort."
				-> 	bypassMessageConfliction

		# operationModeProtection
				info: "Either prevent diagnostics mode after vehicles starts moving or allow diagnostics mode only after some physical change is done on vehicle."
				->	changeOperationMode,
					attemptChangeOperationMode

		| bypassMessageConfliction
				info: "Bypass message confliction protection mechanisms by changing ECU's operation mode -> no conflicts -> service message injection."
				//->	executees.serviceMessageInjection

		| busOff
			info: "A state that an ECU is shutdown forever."
			->	denialOfBodyControl
		
		| injectWakeUpFunction
			-> 	batteryDrain

		| denialOfBodyControl
			info: "Because of ECUs bus-off state, communication between the keyfob and vehicle is cut-off and make driver unable to start her vehicle."
			->	vehicleImmobilization

		| batteryDrain
			->	vehicleImmobilization

		| vehicleImmobilization
			info: "Vehicle cannot be mobilized unless dead ECUs are changed."
			rationale: "Reaching this step is enough."

		| denialOfService 
			info: "Perform a DoS attack on the ECU."
			->	aMachine.denialOfService,
				data.denyAccess
	}

	asset Firmware extends Software
		info: "Specifies the firmware running on an ECU as a software."
	{
		| maliciousFirmwareModification
				info: "Validate a firmware update either by cracking (brute forcing) the checksum or worse by exploiting the absence of verification."
				->  bypassFirmwareValidation,
					crackFirmwareValidation

		| crackFirmwareValidation [ExponentialDistribution(20.0)]
				info: "Crack firmware validation if it is enabled."
				->  hardware.maliciousFirmwareUpload

		& bypassFirmwareValidation
				info: "Bypass firmware validation if it is not enabled."
				->  hardware.maliciousFirmwareUpload

		# firmwareValidation
				info: "Code signing and verification during upload, use of strong checksum functions and/or donâ€™t distribute the private keys for signing."
				rationale: "Rubicon - Zero-knowledge Armor for Automotive Security, RubiconLabs"
				->	bypassFirmwareValidation
	}
	//-----------------------------------


	//AUTOSARLang specific
	asset AdaptiveMachine extends Machine 
		info: "Adaptive machine is a hardware or virtual machine that runs a single adaptive platform instance."{
			| denialOfService 
				info: "Perform a DoS attack on the adaptive machine."
				->	adaptivePlatform.denialOfService,
					data.denyAccess
	}

	asset AdaptivePlatform extends Software 
		info: "A software platform that runs on top of adaptive machine."
	{
		| access
			->	_adaptivePlatformAccess

		| _adaptivePlatformAccess
			->	_softwareAccess,
				aMachine.connect

		| denialOfService
			->	functionalCluster.denialOfService,
				adaptiveApplication.denialOfService,
				aRA.denialOfService,
				data.denyAccess
	}

	asset FunctionalCluster extends AdaptivePlatform 
		info: "Functional cluster is the basic software part of the platform, which contains services and adaptive foundation."
		rationale: "access, denialOfService are not defined in this asset, beacuse it directly inherites the top "
	{
		| launch
			->	access 
			
		| shutdown
			->	denialOfService

		| access
			-> 	_adaptivePlatformAccess,
				circumventPEP

		| circumventPEP
			info: "Circumvent PEP (Policy Enforcement Point) of the functional cluster element."
			->	access
	}

	abstractAsset AdaptivePlatformFoundation extends FunctionalCluster {}

	abstractAsset AdaptivePlatformService extends FunctionalCluster {}

	asset AdaptiveApplication extends AdaptivePlatform {
		| compromise 
			->	access

		| launch
			->	access 

		| access
			rationale: "Access to the application implies an attacker has the capability of the application in the platform."
			->	_adaptivePlatformAccess,
				provideFakeService,
				denialOfService,
				persistentData.requestAccess,
				functionalCluster.access,
				functionalCluster.circumventPEP,
				configurationFile.modifyCapabily,
				manifestFiles.readCapability,
				manifestFiles.denyAccess
			
		| shutdown
			->	denialOfService

		| denialOfService
			info: "Application denied from platform and non-platform services and functionalities."
			->	persistentData.denyAccess,
				executees.denialOfService,
				data.denyAccess

		| requestService
			rationale: "An application can request a service, and get an access to the communication management. [1 page 15]"
			->	comClient.access

		| provideFakeService 
			info: "An application can provide a fake service for further exploitation."
			rationale: "An application can provide a fake service to get an access to the communication management foundation [1 page 15]"
			->	comService.access,
				service.denialOfService, //A fake service can deny legitmate service.
				manifestFiles.readCapability //Read the capabilities of other applications (that request a service)
	}

	asset ARA extends AdaptivePlatform {
		| access 
			info: "Access to the ARA (AUTOSAR Runtime environment for Adaptive Applications)."
			rationale: "Once an attacker gains an access to the library of service interfaces and the functional cluster interface (such as interfaces of operating system, execution management, communication management, etc.), she can do further attacks."
			-> 	_adaptivePlatformAccess,
				informationLeak,
				messageInjection,
				denialOfService

		| informationLeak
			info: "An information leakage between adaptive applications can be launched."
			->	runtimeDataflows.eavesdrop

		| messageInjection
			info: "Inject messages passing through ARA"
			->	runtimeDataflows.manInTheMiddle

		| denialOfService
			info: "Deny service from being provided to/from adaptive applications."
			->	userApps.denialOfService,
				runtimeDataflows.denialOfService,
				platformApps.denialOfService //Deny access to the library interfaces of functional cluster
	}

	asset OperatingSystem extends AdaptivePlatformFoundation {
		| access
			info: "Get an access to the operating system."
			rationale: "By any means, an attacker gets an access to the operating system, maybe, from its parent assets after an authentication via authenticated access or after an access control is bypassed."
			-> 	_adaptivePlatformAccess,
				denialOfService,
				dataInjection,
				memoryCorruption,
				malware 

		& malware 
			info: "A malware program can be injected to the OS."
			rationale: "A malware is a general term for computer viruses, worms, trojan horses, spyware, adware, most rootkits, and other malicious programs.[5]"
			->	accounts.compromise,
				data.denyAccess,
				memoryCorruption,
				denialOfService,
				bypassAccessControl

		| denialOfService
			info: "Perform a DoS attack on the operating system."
			rationale: "Achieved by flooding services, exhausting resources, network requests, etc."
			->	apInstance.denialOfService,
				data.denyAccess

		| dataInjection
			info: "Processing data of running application (process) or thread can be injected."
			rationale: "Data injection from process to process, thread to thread, or from attacker to a processing data."
			->	prccessingData.write

		| informationLeak
			info: "An information leakage can be launched from the running applications."
			rationale: "As a result of memory corruption, an information leak can occur. [6|Page19]"
			->	info.read

		& memoryCorruption
			info: "A memory corruption can occur from unhandled code."
			rationale: "Processes of AA or FC are based on C++, which can cause a memory corruption."
			->	informationLeak,
				prccessingData.read
				
		# protectedRuntimeEnvironment
			rationale: "This defense mechanism is a more general one that includes like data execution prevention, stack smashing protection, address space layout randomization, control-flow integrity, code-pointer integrity/spearation, pointer authentication, etc. [6|pages20-27]"
			->	memoryCorruption

		# antiMalware [probability***]
			->	malware
	}

	asset CommunicationManagement extends AdaptivePlatformFoundation 
		info: "CM is a foundational functionality that the platform should consitute. It handles network services request and reply with a service-oriented architecture model." {
			| access
				info: "Once an attacker gets access to CM, she can act as both network service and network client."
				->	_adaptivePlatformAccess,
					dataflows.request,
					dataflows.respond,
					denialOfService

			| denialOfService
				-> 	appClient.denialOfService
	}

	asset REST extends AdaptivePlatformFoundation 
		info: "RESTful is a foundational functionality that the platform should consitute. It handles network services request and reply with a network binding via HTTP/JSON communication format." {
			| access
				info: "Once an attacker gets access to REST, she can act as both network service and network client."
				->	_adaptivePlatformAccess,
					dataflows.request,
					dataflows.respond,
					denialOfService
			
			| denialOfService
				->	dataflows.denialOfService
	}

	asset ExecutionManagement extends AdaptivePlatformFoundation {
		| access 
			info: "Having an access to the execution management"
			rationale: "An execution management starts and shutdowns applications and/or services. This maybe resulted in furhter exploitation."
			-> 	_adaptivePlatformAccess,
				performStateTransition,
				aa.launch,
				aa.shutdown,
				apf.launch,
				apf.shutdown,
				aps.launch,
				aps.shutdown

		| performStateTransition
			info: "Perform state transition of processes, applications, machine, or functional group."
			rationale: "Execution Management performs the State transitions and controls the actual set of running Processes, depending on the current States. [1|Page29]"
			->	//functionalCluster.denialOfService,
				app.denialOfService
	}
	
}

category Networking {
	asset Network
		info: "Networks include Ethernet LANs, the Internet, and Wifi networks."
	    { 	
			| access
				info: "Access implies the possibility to submit packets over the network. It does not imply the possibility to listen to others' traffic on the network. You are outside the router but with a possibility to communicate in to the network."
				-> 	trafficRouters.forwarding, 
					denialOfService,
					service.connect

			| eavesdrop
				info: "Attackers can sometimes eavesdrop."
				-> 	dataflows.eavesdrop

			| manInTheMiddle
				info: "Attackers can sometimes intercept and tamper with communications."
				->	access,
					eavesdrop,
					dataflows.manInTheMiddle,
					trafficRouters.denialOfService

			| denialOfService
				info: "The network is made unavailable."
				-> 	dataflows.denialOfService 
	}

	asset Router extends NetworkService {
		& access 
			-> 	_machineAccess,
				trafficNetworks.manInTheMiddle,
				forwarding

		| forwarding 
			rationale: "Forwarding is the lightest interaction with the router, where the router simply retransmits received messages. Vulnerabilities may, however, lead to compromise of the router as well as of the associated firewall. Therefore, Forwarding leads to Connect."
			-> 	connect

		| denialOfService 
			-> 	trafficNetworks.denialOfService	
	}

	asset VehicleNetwork extends Network 
		info: "Vehicular network refers to in-vehicle network in this context. It AUTOSAR AP, in-vehicle network includes Ethernet network & bus network."
	{
		| physicalAccess
			info: "Get physical access to the vehicular network."
			->	denialOfService,
				eavesdrop, 
				//manInTheMiddle, 
				access

		| access
			info: "Get an access to the vehicular network."
			->	denialOfService, 
				trafficInjection,
				networkedEcus.connect,
				trafficRouters.forwarding, 
				service.connect 

		| trafficInjection
			rationale: "Reaching this step is enough. It'll be redefined by its child assets."
	}

	asset BusNetwork extends VehicleNetwork
		info: "Bus network includes CAN, LIN, FlexRay networks, and the like." 
	{
		| trafficInjection
			info: "An adversary injects traffic for further exploitation, e.g. wakeup message."
			-> 	wakeUpMessageInjection

	   	| wakeUpMessageInjection
	   		info: "Specialized form of traffic injection"
	   		-> 	busNetworkedEcus.batteryDrain 	
	}

	asset EthernetNetwork extends VehicleNetwork {
		| physicalAccess
			rationale: "A technician attacker can get an opportunity to access the Ethernet network for may be a maintenance."
			-> 	denialOfService,
				//eavesdrop, 
				//manInTheMiddle, 
				access,
				unauthorizedNetworkExpansion,
				resetSwitchPassword

		& unauthorizedNetworkExpansion
			-> 	manInTheMiddle		

		| access
			-> 	denialOfService, 
				trafficInjection,
				networkedEcus.connect,
				trafficRouters.forwarding, 
				service.connect, 
				arpCachePoisoning,
				macSpoofing,
				dhcpSpoofing,
				macFlooding

		| resetSwitchPassword
			-> switchAccess

		| switchAccess
			-> 	overwriteSwitchMACTable,
				resetSwitchPassword,
				denialOfService,
				networkedEcus.connect

		| overwriteSwitchMACTable
			info: "Switch MAC table is overwritten."
			->	macFlooding

		| macFlooding
			->	eavesdrop,
				denialOfService

		| shutdown
			->	denialOfService

		| denialOfService
			->	dataflows.denialOfService

		| eavesdrop
			-> 	sessionHijacking,
				replay,
				dataflows.eavesdrop

		| sessionHijacking
			-> 	impersonation

		| replay
			->	impersonation

		| dhcpSpoofing
			->	manInTheMiddle

		& arpCachePoisoning
			->	manInTheMiddle

		& macSpoofing
			->	manInTheMiddle

		| impersonation
			->	manInTheMiddle
		
		# sARP
			->	arpCachePoisoning
		
		# idps
			->	macSpoofing
		
		# limitNewMACAddress
			->	unauthorizedNetworkExpansion
	}
}


category communication {
	asset Information
		info: "Information can be stored as data and transmitted in data flows. Data and data flows are syntactic forms of the semantics represented by the Information asset. Thus, multiple data and data flow assets can contain the same information."
	{
		| read
			info: "When information is read by the attacker, any associated confidentiality costs are incurred. It is sufficient that the attacker reads a single data or data flow to breach confidentiality."

		& write
			info: "When information is written by the attacker, any associated integrity costs are incurred. The attacker must, however, compromise all data and data flows in order to breach integrity. Thus, if the records of an ATM are modified, this might incur no cost as long as the master data is untouched."

		& delete
			info: "When information is deleted by the attacker, any associated availability costs are incurred. The attacker must, however, delete all data and data flows in order to breach integrity. Thus, if malware wipes a hard drive, this might incur no cost as long as a backup is easily accessible."
	}

	asset Data
		info: "Data is a concrete, syntactic representation of Information at rest."
	{
		| requestAccess  
			info: "When stored on a machine, access control needs to be granted."
			-> 	authenticatedRead,
				authenticatedWrite,
				authenticatedDelete

		| anyAccountRead 
			info: "A single account with read privileges (in conjuction with data access) is enough to read the data."
			-> 	authenticatedRead

		| anyAccountWrite
			info: "A single account with write privileges (in conjuction with data access) is enough to write the data."
			-> 	authenticatedWrite

		| anyAccountDelete
			info: "A single account with delete privileges (in conjuction with data access) is enough to delete the data."
			-> 	authenticatedDelete

		& authenticatedRead
			info: "Access and authentication will allow reading of data."
			-> 	read

		& authenticatedWrite
			info: "Access and authentication will allow writing of data."
			-> 	write

		& authenticatedDelete
			info: "Access and authentication will allow deleting of data."
			-> 	delete

		| read
			info: "An attacker that reads the data, learns the encoded information."
			-> 	information.read,
				containedData.read

		| write
			-> 	delete,
				information.write,
				containedData.write

		| delete
			info: "Deletion of data leads to information loss only if there is no untouched copy elsewhere. If data is transmitted through data flows, those data flows will also be affected by the tampering."
			-> 	information.delete,
				containedData.delete

		| denyAccess
			info: "Denial-of-service attacks can make data unavailable."
	}

	asset Dataflow
		info: "Dataflow is a channel that contains Data in transit."
		rationale: "As opposed to securiLang1, missing network paths cannot stop modelled dataflows. If there is a dataflow but no network infrastructure to support it, this logic will assume that the unmodelled infrastructure exists."
	{
		| eavesdrop
			info: "An attacker that eavesdrops on the data flow, can access the contained data. That data may, in turn, be encrypted, thus preventing a breach of confidentiality."
			->	data.read

		| manInTheMiddle
			info: "An attacker that man-in-the-middles the data flow, can control the contained data. That data may, in turn, be encrypted and authenticated, thus preventing a breach of confidentiality and integrity."
			->	eavesdrop, 
				denialOfService, 
				request,
				respond,
				data.write, 
				data.read, 
				data.delete

		| denialOfService
			info: "A denial-of-service-attack on the dataflow makes the contained data inaccessible. The information may, however also be available elsewhere."
			->	data.delete

		| request
			->	services.connect

		| respond
			->	clients.connect,
				executingClients.access
	}

	asset AuthenticationService extends Service 
		rationale: "Authentication service is not actively involved in account authentication (e.g. key.read leads directly to account.authenticate), because that is not needed for the attacks we are interested in."
		{
			| access
				info: "If a service is tasked with authentication of accounts, its compromise leads to the compromise of the associated accounts."
				-> 	_softwareAccess,
					authenticatedAccounts.compromise
	}

	asset EncryptedData extends Data
      info: "Data is a concrete, syntactic representation of Information at rest."
	{
		& authenticatedRead
			info: "Access and authentication will allow reading of data."
			-> readEncrypted

		& authenticatedWrite
			info: "Access and authentication will allow writing of data."
			-> writeEncrypted

		& readEncrypted
			->	read

		& writeEncrypted
			-> write

		E decryptionKeysExist
			info: "If any decryption keys exist, this defense step is compromised, but if not, this will prevent readEncrypted from being reached."
			rationale: "Without this step, readEncrypted will, in the case of no modelled keys, be compromised, which is counterintuitive."
			<- decryptionKeys
			-> readEncrypted

		E encryptionKeysExist
			info: "If any encryption keys exist, this defense step is compromised, but if not, this will prevent witeEncrypted from being reached."
			rationale: "Without this step, writeEncrypted will, in the case of no modelled keys, be compromised, which is counterintuitive."
			<- encryptionKeys
			-> writeEncrypted
	}

	asset SignalToServiceMappingService extends Service {
		| access
			info: "Access to the adaptive platform applications."
			->	_softwareAccess,
				denialOfService

		| denialOfService
			info: "Deny signal-to-service mapping service, the communication with non-AUTOSAR applications can be denied."
			->	comApp.denialOfService //Not work for AA-to-AA, needs further review
	}

	asset Manifest extends Data {
		| read
			info: "Read manifest files."
			->	readCapability

		| write
			info: "A manifest file is being written implies change of AAs capability."
			->	delete,
				modifyCapabily

		| delete
			info: "AAs configuration file is deleted."
			->	ownerApp.denialOfService

		| denyAccess
			info: "No access to the AA's configuration file"
			->	ownerApp.denialOfService

		| readCapability
			info: "Read other AAs capability"
			-> 	otherApps.access

		| modifyCapabily
			->	otherApps.access,
				otherApps.denialOfService
	}

	asset PersistentData extends EncryptedData {}
} 


category Security {

	asset CryptographicKey extends Data {
       | read
         	-> 	decryptedData.readEncrypted,
				encryptedData.writeEncrypted
	}

   asset Account {
		| compromise
			->	accessedMachines.authenticate, 
				readData.anyAccountRead,
				writtenData.anyAccountWrite,
				deletedData.anyAccountDelete,
				authenticatees.compromise
	}

   asset Credentials extends Data {
	    | read
	    	-> 	accounts.compromise
	}

	asset Vulnerability {
	   | exploit [ExponentialDistribution(10.0)]
	      -> 	privileges.compromise
   }

   	asset IAM extends AdaptivePlatformFoundation {
   		| access
   			info: "Get an access to the IAM framework."
   			rationale:"Assumption: an attacker gets an access to the running IAM instance."
   			->	_softwareAccess,
   				denialOfService,
   				circumventPDP,
   				processedPolicies.read,
   				processedCapabilities.read

   		| denialOfService
   			info: "Making the IAM framework unavailable."
   			->	functionalCluster.denialOfService, 
   				authApps.denialOfService,
   				data.denyAccess

   		| circumventPDP
   			info: "Circumvent PDP (Policy Decision Point) of the IAM."
   			->	//functionalCluster.access,
   				data.requestAccess

   		| authenticationRequest
   			info: "Functional cluster applications request IAM for an authentication of a requesting client in order to provide it a service. "
   			->	authenticate
   	}

   	asset CryptoStack extends AdaptivePlatformFoundation {
         | access
            -> _softwareAccess,
               denialOfService,
               circumventCryptoService,
               keys.read

         | denialOfService
            info: "Denial of cryptographic services to requesting applications."
            -> 	encryptedData.denyAccess, //Persistent data is always encrypted
            	decryptedData.denyAccess, //Persistent data is always encrypted
            	functionalCluster.denialOfService //Functional cluster will not accessible from any requesting app 

         | circumventCryptoService
            info: "Circumvent the crypto service manager."
            -> 	iam.authenticationRequest,
            	dataflowForProcess.eavesdrop,
               	decryptedData.readEncrypted,
               	encryptedData.writeEncrypted
	}
}

category People {
	asset User {
		| compromise
			->	accounts.compromise
	}
}

associations {	
	Account [connectPrivileges] 	*	<-- ConnectionPrivilees	--> *				[connectMachines]	Machine
			info: "These privileges are granted to anyone who connects to a machine."
	Account [accounts]			  	*	<-- AccessPrivileges	--> *				[accessedMachines]	Machine
			info: "These accounts grant access the the machine."
	Account [accounts]				*  	<-- Credentials			--> *					[credentials]	Credentials
	Account [readingAccounts]		*  	<-- Read				--> *						[readData]	Data
	Account [writingAccounts]		*  	<-- Write				--> *					[writtenData]	Data
	Account [deletingAccounts]		*  	<-- Delete				--> *					[deletedData]	Data
	Account [authenticators]		*	<-- Authentication		--> *				[authenticatees]	Account
	Account [authenticatedAccounts] *	<-- AccountAuthentication --> 0-1  	[authenticationServices]	AuthenticationService
      	info: "Conceptually, authentication is separated from access control (obvious in the case of e.g. Radius servers). authenticationServices provide the authentication service."
   	Account [privileges]			1-* <-- Privileges 			--> *				[vulnerabilities]	Vulnerability
	Account [accounts]				*  	<-- UserAccount 		--> *							[users]	User
	Account [assignedAccounts]		1-* <-- Assignment			--> *				[assignedSoftwares]	Software
			info: "Software needs to be granted certain privileges when executing on a platform. When the software is compromised, the attacker gains its privileges on the platform."
    Data [data] 					*	<-- Representation 		--> 0-1					[information]	Information
			info: "The data constitutes a syntactic representation at rest of the information."
	Data [containingData] 			*	<-- Containment 		--> *					[containedData]	Data	
	Machine [machines] 				*	<-- Storage 			--> *							[data]	Data
	Machine	[connectionVulnerableMachine] *	<-- ConnectionVulnerability	--> 0-1	[connectionVulnerabilities]	Vulnerability	
	Machine [accessVulnerableMachine] *	<-- AccessVulnerability --> 0-1			[accessVulnerabilities]	Vulnerability   	
   	Machine [executor]				0-1	<-- Execution 			--> *						[executees]	Software
   	Network [trafficNetworks]		* 	<-- Connection 			--> * 				[trafficRouters]	Router
	Network [networks]				* 	<-- Communication 		--> *						[dataflows]	Dataflow	
	Network [networks]				* 	<-- Listening		 	--> *						[service]	NetworkService
	Dataflow [dataflows]			*	<-- Request				--> *						[clients]	NetworkClient
	Dataflow [dataflows]			* 	<-- Response			--> *						[services]	NetworkService
	Dataflow [programDistributionFlow] * <-- ProgramDistributionToClient --> *		[executingClients] 	NetworkClient
		info: "Some servers distribute programs to clients, e.g. software updates, or Web applications."
	Dataflow [programDistributionFlow] * <-- ProgramDistributionFromServer --> *	[providingServices]	NetworkService
		info: "Some servers distribute programs to clients, e.g. software updates, or Web applications."
	Dataflow [dataflow]				0-1	<--	Transmission		-->	0-1							[data]	Data 		
	//Dataflow [dataflows]			*	<-- Request				--> *						[clients]	CommunicationManagement
	//Dataflow [dataflows]			*	<-- Response			--> *						[services]	CommunicationManagement
	OperatingSystem [os]			*	<--	ProcessedData		-->	*							[info]	Information	
	OperatingSystem [os]			*	<--	ProcessData 		-->	*				[prccessingData]	Data
	OperatingSystem [os] 			1 	<-- ApOs 				--> 1					[apInstance]	AdaptivePlatform
	OperatingSystem [os] 			1 	<-- OsAccounts 			--> *						[accounts]	Account	
	AdaptiveApplication [ownerApps]	*	<--	PersistentData 		-->	*				[persistentData]	Data	
	AdaptiveApplication [authApps]	*	<--	Autherization		--> 0-1						[imaAPI]	IAM
	AdaptiveApplication [ownerApp]	0-1	<--	Capability 			-->	1				[configurationFile]	Manifest
	AdaptiveApplication [otherApps]	*	<--	AutherizedAccess	-->	*					[manifestFiles]	Manifest //??
	AdaptiveApplication [comApp]	*	<--	SignalServiceConv	-->	0-1				[serviceConverter]	SignalToServiceMappingService	
	AdaptiveApplication [service]	*	<-- NonPlatformService 	--> * 						[client]	AdaptiveApplication
		info: "AdaptiveApplication provide non-platform services to other AAs."
	AdaptiveApplication [npService]	* 	<-- ServiceRespond 		--> 0-1 					[comClient] CommunicationManagement 
	AdaptiveApplication [appClient]	* 	<-- ServiceRequest 		--> 0-1 				[comService]	CommunicationManagement 
	AdaptiveApplication [app]	  	* 	<-- PlatformFunctionality--> * 			[functionalCluster]	FunctionalCluster
	ARA [runtimeEnvironment]		0-1	<--	ComInterface		-->	*				[runtimeDataflows]	Dataflow
	ARA [araLibrary]				0-1	<--	RuntimeEnvironment	-->	*						[userApps]	AdaptiveApplication
	ARA [library]					0-1	<-- LibraryInterface 	--> *					[platformApps]	FunctionalCluster
	ECU [networkedEcus]				*	<--	Connection			-->	0-1						[vNetworks]	VehicleNetwork
	ECU [busNetworkedEcus] 			*	<--	EcuBusConnection	-->	0-1				 	[busNetwork]	BusNetwork
	ECU [ecu] 						1 	<-- AmEcu 				--> * 						[aMachine]	AdaptiveMachine
	AdaptiveMachine [aMachine] 		1 	<-- ApAm 				--> 1 				[adaptivePlatform]	AdaptivePlatform
	AdaptivePlatform [aPlatform] 	1 	<-- FcAp 				--> *	 			[functionalCluster]	FunctionalCluster
	AdaptivePlatform [aPlatform] 	1 	<-- AaAp 				--> *			[adaptiveApplication]	AdaptiveApplication	
	AdaptivePlatform [aPlatform] 	1 	<-- AraAp 				--> 1 							[aRA]	ARA
	EncryptedData [decryptedData]	*	<-- Decryption			-->	*				[decryptionKeys]	CryptographicKey
   	EncryptedData [encryptedData]	*	<-- Encryption			-->	*				[encryptionKeys]	CryptographicKey
	IAM [iamFramework]				0-1	<--	ReadPolicy 			-->	*				[processedPolicies]	Manifest
	IAM [accessManager]				0-1	<--	ReadCapability 		-->	*			[processedCapabilities]	Manifest
	IAM [iamProgram]				1	<--	IAMProgram 			-->	1							[os]	OperatingSystem
	IAM [iam]						0-1	<--	AccessControl 		-->	0-1					[cryptoStack]	CryptoStack
	IAM [iamProtection]				1	<--	AccessProtection 	-->	*					[apServices]	Service
	//IAM [iam]						0-1	<-- AccessManager		--> *				[functionalCluster]	FunctionalCluster
	CryptoStack [cryptoService] 	0-1	<--	CryptoService		-->	*							[keys]	CryptographicKey
	CryptoStack [cryptoProcessor] 	0-1	<--	CryptoProcess 		-->	*			[dataflowForProcess]	Dataflow
	CryptoStack [encProgram] 		0-1	<--	Encryption			-->	*					[encryptedData]	EncryptedData
	CryptoStack [decProgram] 		0-1	<--	Decryption			-->	*					[decryptedData]	EncryptedData
	ECU	[hardware] 					1	<-- FirmwareExecution	--> 0-1						[firmware]	Firmware
		info: "Every ECU can have (up to one) firmware running on it."
	CommunicationManagement [com]	*	<-- CmDataflow 			--> * 						[dataflows]	Dataflow 
	REST [rest]						*	<-- RestDataflow 		--> * 						[dataflows]	Dataflow 
	ExecutionManagement [em]		1	<-- EmAA 				--> * 							[aa]	AdaptiveApplication 
	ExecutionManagement [em]		1	<-- EmAPF 				--> * 							[apf]	AdaptivePlatformFoundation 
	ExecutionManagement [em]		1	<-- EmAPS 				--> * 							[aps]	AdaptivePlatformService 
	//ExecutionManagement [em]		1	<-- EmAPS 				--> * 				[functionalCluster]	FunctionalCluster 
}